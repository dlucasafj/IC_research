DATA_TESTE$linesEdited = DATA_TESTE$linesAdded+DATA_TESTE$linesRemoved
View(DATA_TESTE)
dbWriteTable(new_bd,"NEW_BASE_DEVS",DATA_TESTE,append=TRUE)
new_bd = dbConnect(SQLite(), "NEW_DATA.db")
dbWriteTable(new_bd,"NEW_BASE_DEVS",DATA_TESTE,append=TRUE)
for(i in project_list){
projectID = i
code_smells = dbGetQuery(dataBase,"SELECT COMMIT_MUDANCAS_2.projectID as [projectID],COMMIT_MUDANCAS_2.author as [author],count(SONAR_ISSUES.creationCommitHash) as code_smells FROM COMMIT_MUDANCAS_2
JOIN SONAR_ISSUES on COMMIT_MUDANCAS_2.commit_hash_changes=SONAR_ISSUES.creationCommitHash WHERE COMMIT_MUDANCAS_2.projectID=? AND SONAR_ISSUES.squid LIKE 'code_smells:%'
GROUP BY COMMIT_MUDANCAS_2.author", params=c(projectID))
dbExecute(new_bd,"UPDATE NEW_DEVS_TD2 set code_smells=:code_smells WHERE author =:author AND projectID=:projectID",
params= data.frame(code_smells=code_smells$code_smells,author=code_smells$author, projectID=code_smells$projectID))
}
View(code_smells)
for(i in project_list){
projectID = i
code_smells = dbGetQuery(dataBase,"SELECT COMMIT_MUDANCAS_2.projectID as [projectID],COMMIT_MUDANCAS_2.author as [author],count(SONAR_ISSUES.creationCommitHash) as code_smells FROM COMMIT_MUDANCAS_2
JOIN SONAR_ISSUES on COMMIT_MUDANCAS_2.commit_hash_changes=SONAR_ISSUES.creationCommitHash WHERE COMMIT_MUDANCAS_2.projectID=? AND SONAR_ISSUES.squid LIKE 'code_smells:%'
GROUP BY COMMIT_MUDANCAS_2.author", params=c(projectID))
dbExecute(new_bd,"UPDATE NEW_BASE_DEVS set code_smells=:code_smells WHERE author =:author AND projectID=:projectID",
params= data.frame(code_smells=code_smells$code_smells,author=code_smells$author, projectID=code_smells$projectID))
}
#Antisingleton
antisingleton = dbGetQuery(new_bd,"SELECT * from Antisingleton")
antisingleton_size = length(antisingleton$author)
for(i in 1:antisingleton_size){
print(antisingleton$author)
dbExecute(new_bd,"UPDATE NEW_DEVS_TD2 set smell_antisingleton=:smell_antisingleton WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_antisingleton=antisingleton$smell_antisingleton,author=antisingleton$author, projectID=antisingleton$projectID))
}
for(i in 1:antisingleton_size){
print(antisingleton$author)
dbExecute(new_bd,"UPDATE NEW_BASE_DEVS set smell_antisingleton=:smell_antisingleton WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_antisingleton=antisingleton$smell_antisingleton,author=antisingleton$author, projectID=antisingleton$projectID))
}
#conecta ao BD
dataBase = dbConnect(SQLite(), "TechnicalDebtDataset_20200606.db")
new_bd = dbConnect(SQLite(), "NEW_DATA.db")
for(i in project_list ){
projectID=i
devs_data = dbGetQuery(dataBase,
"SELECT COMMIT_MUDANCAS_2.author,SUM(GIT_COMMITS_CHANGES.linesAdded) AS [linesAdded],
SUM(GIT_COMMITS_CHANGES.linesRemoved) AS [linesRemoved]
FROM COMMIT_MUDANCAS_2
INNER JOIN GIT_COMMITS_CHANGES ON COMMIT_MUDANCAS_2.commit_hash_changes = GIT_COMMITS_CHANGES.commitHash
WHERE COMMIT_MUDANCAS_2.projectID = ? GROUP BY COMMIT_MUDANCAS_2.author", params=c(projectID) )
devs_data$projectID = projectID
#transformar char em num
devs_data = transform(devs_data, linesAdded = as.numeric(linesAdded),
linesRemoved = as.numeric(linesRemoved))
#soma as colunas pra chegar ao n√∫mero de linhas editadas
devs_data$linesEdited = devs_data$linesAdded + devs_data$linesRemoved
TESTE= data.frame(linesEdited=devs_data$linesEdited,author=devs_data$author, projectID=devs_data$projectID)
dbWriteTable(new_bd,"BASE_ULTIMATE",TESTE,append=TRUE)
}
for(i in project_list){
projectID = i
code_smells = dbGetQuery(dataBase,"SELECT COMMIT_MUDANCAS_2.projectID as [projectID],COMMIT_MUDANCAS_2.author as [author],count(SONAR_ISSUES.creationCommitHash) as code_smells FROM COMMIT_MUDANCAS_2
JOIN SONAR_ISSUES on COMMIT_MUDANCAS_2.commit_hash_changes=SONAR_ISSUES.creationCommitHash WHERE COMMIT_MUDANCAS_2.projectID=? AND SONAR_ISSUES.squid LIKE 'code_smells:%'
GROUP BY COMMIT_MUDANCAS_2.author", params=c(projectID))
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set code_smells=:code_smells WHERE author =:author AND projectID=:projectID",
params= data.frame(code_smells=code_smells$code_smells,author=code_smells$author, projectID=code_smells$projectID))
}
for(i in project_list){
projectID = i
code_smells = dbGetQuery(dataBase,"SELECT COMMIT_MUDANCAS_2.projectID as [projectID],COMMIT_MUDANCAS_2.author as [author],count(SONAR_ISSUES.creationCommitHash) as code_smells FROM COMMIT_MUDANCAS_2
JOIN SONAR_ISSUES on COMMIT_MUDANCAS_2.commit_hash_changes=SONAR_ISSUES.creationCommitHash WHERE COMMIT_MUDANCAS_2.projectID=? AND SONAR_ISSUES.squid LIKE 'code_smells:%'
GROUP BY COMMIT_MUDANCAS_2.author", params=c(projectID))
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set code_smells=:code_smells WHERE author =:author AND projectID=:projectID",
params= data.frame(code_smells=code_smells$code_smells,author=code_smells$author, projectID=code_smells$projectID))
}
#Antisingleton
antisingleton = dbGetQuery(new_bd,"SELECT * from Antisingleton")
antisingleton_size = length(antisingleton$author)
for(i in 1:antisingleton_size){
print(antisingleton$author)
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_antisingleton=:smell_antisingleton WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_antisingleton=antisingleton$smell_antisingleton,author=antisingleton$author, projectID=antisingleton$projectID))
}
#BaseClasse Abstract
baseClasse_abstract = dbGetQuery(new_bd,"SELECT * FROM Baseclass_abstract")
baseClass_size = length(baseClasse_abstract$author)
for(i in 1:baseClass_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_baseclass_abstract=:smell_baseclass_abstract WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_baseclass_abstract=baseClasse_abstract$smell_baseclass_abstract, author=baseClasse_abstract$author, projectID=baseClasse_abstract$projectID))
}
class_data_private = dbGetQuery(new_bd,"SELECT * FROM  Class_data_private")
class_data_size = length(class_data_private$smell_class_data_private)
for(i in 1:class_data_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_class_data_private=:smell_class_data_private WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_class_data_private=class_data_private$smell_class_data_private, author=class_data_private$author, projectID=class_data_private$projectID))
}
complex_class= dbGetQuery(new_bd,"SELECT * FROM Complex_class")
complex_class_size = length(complex_class$author)
for(i in 1:complex_class_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_complex_class=:smell_complex_class WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_complex_class=complex_class$smell_complex_class, author=complex_class$author, projectID=complex_class$projectID))
}
large_class=dbGetQuery(new_bd,"SELECT  * FROM Large_class")
large_class_size = length(large_class$author)
for(i in 1:large_class_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_large_class=:smell_large_class WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_large_class=large_class$smell_large_class, author=large_class$author, projectID=large_class$projectID))
}
lazy_class = dbGetQuery(new_bd,"SELECT  * FROM Lazy_class")
lazy_class_size = length(lazy_class$author)
for(i in 1:lazy_class_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_lazy_class=:smell_lazy_class WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_lazy_class=lazy_class$smell_lazy_class, author=lazy_class$author, projectID=lazy_class$projectID))
}
long_method = dbGetQuery(new_bd,"SELECT  * FROM Long_method")
long_method_size = length(long_method$author)
for(i in 1:long_method_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_long_method=:smell_long_method WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_long_method=long_method$smell_long_method, author=long_method$author, projectID=long_method$projectID))
}
long_parameter_list =  dbGetQuery(new_bd,"SELECT  * FROM Long_parameter_list")
long_parameter_list_size=length(long_parameter_list$smell_long_parameter_list)
for(i in 1:long_parameter_list_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_long_parameter_list=:smell_long_parameter_list WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_long_parameter_list=long_parameter_list$smell_long_parameter_list, author=long_parameter_list$author, projectID=long_parameter_list$projectID))
}
many_field_attributes_not_complex = dbGetQuery(new_bd,"SELECT * FROM Many_field_attributes_not_complex")
many_field_attributes_not_complex_size=length(many_field_attributes_not_complex$smell_many_field_attributes_not_complex)
for(i in 1:many_field_attributes_not_complex_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_many_field_attributes_not_complex=:smell_many_field_attributes_not_complex WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_many_field_attributes_not_complex=many_field_attributes_not_complex$smell_many_field_attributes_not_complex, author=many_field_attributes_not_complex$author, projectID=many_field_attributes_not_complex$projectID))
}
#Refused parent bequest
refused_parent_bequest = dbGetQuery(new_bd,"SELECT * FROM Refused_parent_bequest")
refused_parent_bequest_size = length(refused_parent_bequest$smell_refused_parent_bequest)
for(i in 1:refused_parent_bequest_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_refused_parent_bequest=:smell_refused_parent_bequest WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_refused_parent_bequest=refused_parent_bequest$smell_refused_parent_bequest, author=refused_parent_bequest$author, projectID=refused_parent_bequest$projectID))
}
spaghetti_code = dbGetQuery(new_bd,"SELECT  * FROM Spaghetti_code")
spaghetti_code_size=length(spaghetti_code$smell_spaghetti_code)
for(i in 1:spaghetti_code_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_spaghetti_code=:smell_spaghetti_code WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_spaghetti_code=spaghetti_code$smell_spaghetti_code, author=spaghetti_code$author, projectID=spaghetti_code$projectID))
}
speculative_generality = dbGetQuery(new_bd,"SELECT * FROM Speculative_generality")
speculative_generality_size=length(speculative_generality$smell_speculative_generality)
for(i in 1:speculative_generality_size){
dbExecute(new_bd,"UPDATE BASE_ULTIMATE set smell_speculative_generality=:smell_speculative_generality WHERE author =:author AND projectID=:projectID",
params= data.frame(smell_speculative_generality=speculative_generality$smell_speculative_generality, author=speculative_generality$author, projectID=speculative_generality$projectID))
}
new_bd = dbConnect(SQLite(), "NEW_DATA.db")
correlacao = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE")
# tratando os campos nulos
size = length(correlacao$author)
for(i in 1:size){
if(is.na(correlacao$code_smells[i])){
correlacao$code_smells[i] = 0
}
}
cor_smells_codeChurn_spearman=cor.test(correlacao$linesEdited,correlacao$code_smells, method = "spearman",exact=FALSE)
KLOC = (correlacao$linesEdited)/1000
TD = (correlacao$code_smells)
# Creating the plot
#abline(lm(TD ~KLOC), col = "red")
plot(KLOC, TD, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Code Smells+Sonar Smells) x KLOC")
View(cor_smells_codeChurn_spearman)
print(cor_smells_codeChurn_spearman)
View(cor_smells_codeChurn_spearman)
cor_smells_codeChurn_spearman[["estimate"]]
cor_smells_codeChurn_spearman[["p.value"]]
smell_detectado = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.code_smells  NOT NULL ")
View(smell_detectado)
cor2_smells_codeChurn_spearman=cor.test(smell_detectado$linesEdited,smell_detectado$code_smells, method = "spearman",exact=FALSE)
KLOC = (smell_detectado$linesEdited)/1000
TD = (smell_detectado$code_smells)
# Creating the plot
#abline(lm(TD ~KLOC), col = "red")
plot(KLOC, TD, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Code Smells+Sonar Smells) x KLOC")
View(cor2_smells_codeChurn_spearman)
cor2_smells_codeChurn_spearman[["estimate"]]
cor2_smells_codeChurn_spearman[["p.value"]]
dataBase = dbConnect(SQLite(), "TechnicalDebtDataset_20200606.db")
new_bd = dbConnect(SQLite(), "NEW_DATA.db")
project_list = dbGetQuery(dbcon, "SELECT projectID FROM PROJECTS ")
project_list = dbGetQuery(dataBase, "SELECT projectID FROM PROJECTS ")
project_list = project_list[["projectID"]]
start_time <- Sys.time()
for(projectID in project_list){
# projectID = project_list[i]
print(projectID) # printa nome dos projetos
# Busca a tabela na posi√ß√£o i
temp_devs_data = dbGetQuery(dbcon, "SELECT author, MAX(authorDate), MIN(authorDate)
FROM GIT_COMMITS
WHERE projectID = ? AND merge='False' GROUP BY author"
, params = c(projectID))
#renomeia as colunas
colnames(temp_devs_data) <- c('author','last_commit', 'first_commit')
# cria as datas 1
first_dat = ymd_hms(temp_devs_data$first_commit)
last_dat = ymd_hms(temp_devs_data$last_commit)
temp_devs_data$xp_in_hours = difftime(last_dat, first_dat, units = "hours")
temp_devs_data$xp_in_days = difftime(last_dat, first_dat, units = "days")
temp_devs_data$xp_in_weeks = difftime(last_dat, first_dat, units = "weeks")
devs_xp = temp_devs_data %>% select(author, xp_in_days, xp_in_weeks)
dbWriteTable(new_bd, "EXPERIENCIA_DEV", devs_xp, append=TRUE)
}
end_time <- Sys.time()
print(end_time - start_time)
start_time <- Sys.time()
for(projectID in project_list){
# projectID = project_list[i]
print(projectID) # printa nome dos projetos
# Busca a tabela na posi√ß√£o i
temp_devs_data = dbGetQuery(dataBase, "SELECT author, MAX(authorDate), MIN(authorDate)
FROM GIT_COMMITS
WHERE projectID = ? AND merge='False' GROUP BY author"
, params = c(projectID))
#renomeia as colunas
colnames(temp_devs_data) <- c('author','last_commit', 'first_commit')
# cria as datas 1
first_dat = ymd_hms(temp_devs_data$first_commit)
last_dat = ymd_hms(temp_devs_data$last_commit)
temp_devs_data$xp_in_hours = difftime(last_dat, first_dat, units = "hours")
temp_devs_data$xp_in_days = difftime(last_dat, first_dat, units = "days")
temp_devs_data$xp_in_weeks = difftime(last_dat, first_dat, units = "weeks")
devs_xp = temp_devs_data %>% select(author, xp_in_days, xp_in_weeks)
dbWriteTable(new_bd, "EXPERIENCIA_DEV", devs_xp, append=TRUE)
}
end_time <- Sys.time()
print(end_time - start_time)
install.packages("lubridate")
library(lubridate)
dataBase = dbConnect(SQLite(), "TechnicalDebtDataset_20200606.db")
new_bd = dbConnect(SQLite(), "NEW_DATA.db")
project_list = dbGetQuery(dataBase, "SELECT projectID FROM PROJECTS ")
project_list = project_list[["projectID"]]
start_time <- Sys.time()
for(projectID in project_list){
# projectID = project_list[i]
print(projectID) # printa nome dos projetos
# Busca a tabela na posi√ß√£o i
temp_devs_data = dbGetQuery(dataBase, "SELECT author, MAX(authorDate), MIN(authorDate)
FROM GIT_COMMITS
WHERE projectID = ? AND merge='False' GROUP BY author"
, params = c(projectID))
#renomeia as colunas
colnames(temp_devs_data) <- c('author','last_commit', 'first_commit')
# cria as datas 1
first_dat = ymd_hms(temp_devs_data$first_commit)
last_dat = ymd_hms(temp_devs_data$last_commit)
temp_devs_data$xp_in_hours = difftime(last_dat, first_dat, units = "hours")
temp_devs_data$xp_in_days = difftime(last_dat, first_dat, units = "days")
temp_devs_data$xp_in_weeks = difftime(last_dat, first_dat, units = "weeks")
devs_xp = temp_devs_data %>% select(author, xp_in_days, xp_in_weeks)
dbWriteTable(new_bd, "EXPERIENCIA_DEV", devs_xp, append=TRUE)
}
end_time <- Sys.time()
print(end_time - start_time)
library(DBI)
library(RSQLite)
library(dbplyr)
library(dplyr)
start_time <- Sys.time()
for(projectID in project_list){
# projectID = project_list[i]
print(projectID) # printa nome dos projetos
# Busca a tabela na posi√ß√£o i
temp_devs_data = dbGetQuery(dataBase, "SELECT author, MAX(authorDate), MIN(authorDate)
FROM GIT_COMMITS
WHERE projectID = ? AND merge='False' GROUP BY author"
, params = c(projectID))
#renomeia as colunas
colnames(temp_devs_data) <- c('author','last_commit', 'first_commit')
# cria as datas 1
first_dat = ymd_hms(temp_devs_data$first_commit)
last_dat = ymd_hms(temp_devs_data$last_commit)
temp_devs_data$xp_in_hours = difftime(last_dat, first_dat, units = "hours")
temp_devs_data$xp_in_days = difftime(last_dat, first_dat, units = "days")
temp_devs_data$xp_in_weeks = difftime(last_dat, first_dat, units = "weeks")
devs_xp = temp_devs_data %>% select(author, xp_in_days, xp_in_weeks)
dbWriteTable(new_bd, "EXPERIENCIA_DEV", devs_xp, append=TRUE)
}
end_time <- Sys.time()
print(end_time - start_time)
new_bd = dbConnect(SQLite(), "NEW_DATA.db")
smell_complex_class = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE  BASE_ULTIMATE.smell_complex_class NOT NULL")
churn = smell_complex_class$linesEdited
smell_complex_class = smell_complex_class$smell_complex_class
corr_complex_class= cor.test(codeChurn,smell_complex_class,method = "spearman", exact = FALSE)
corr_complex_class= cor.test(churn,smell_complex_class,method = "spearman", exact = FALSE)
View(corr_complex_class)
corr_complex_class[["statistic"]]
corr_complex_class[["p.value"]]
corr_complex_class[["estimate"]]
KLOC = (churn)/1000
TD = (smell_complex_class)
plot(KLOC, TD, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Complex Class) x KLOC")
KLOC
TD
plot(KLOC, TD, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Complex Class) x KLOC")
smell_antisingleton = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_antisingleton NOT NULL")
churn = smell_antisingleton$linesEdited
smell_antisingleton = smell_antisingleton$smell_antisingleton
corr_antisingleton = cor.test(churn,smell_antisingleton, method = "spearman", exact = FALSE)
View(corr_antisingleton)
corr_antisingleton[["statistic"]]
corr_antisingleton[["parameter"]]
corr_antisingleton[["p.value"]]
corr_antisingleton[["estimate"]]
CHURN = (churn)/1000
plot(CHURN, smell_antisingleton, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Antisingleton) x KLOC")
churn = smell_complex_class$linesEdited
smell_complex_class = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE  BASE_ULTIMATE.smell_complex_class NOT NULL")
churn = smell_complex_class$linesEdited
smell_complex_class = smell_complex_class$smell_complex_class
corr_complex_class= cor.test(churn,smell_complex_class,method = "spearman", exact = FALSE)
View(corr_complex_class)
CHURN = (churn)/1000
plot(CHURN, smell_complex_class, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Complex Class) x KLOC")
install.packages("ggplot2")
smell_complex_class = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE  BASE_ULTIMATE.smell_complex_class NOT NULL")
churn = smell_complex_class$linesEdited
smell_complex_class = smell_complex_class$smell_complex_class
CHURN = (churn)/1000
plot(CHURN, smell_complex_class, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Complex Class) x KLOC")
abline(lm(smell_complex_class ~ CHURN), col = "red")
plot(CHURN, smell_complex_class, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Complex Class) x KLOC")
abline(lm(smell_complex_class ~ CHURN), col = "red")
smell_baseclass_abstract = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_baseclass_abstract NOT NULL")
churn = smell_baseclass_abstract$linesEdited
smell_baseclass_abstract = smell_baseclass_abstract$smell_baseclass_abstract
corr_baseclass_abstract = cor.test(churn,smell_baseclass_abstract, method = "spearman", exact = FALSE)
View(corr_baseclass_abstract)
corr_baseclass_abstract[["p.value"]]
corr_baseclass_abstract[["estimate"]]
corr_baseclass_abstract[["statistic"]]
CHURN = (churn)/1000
plot(CHURN, corr_baseclass_abstract, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Baseclass Abstract) x KLOC")
plot(CHURN, smell_baseclass_abstract, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Baseclass Abstract) x KLOC")
CHURN = (churn)/1000
plot(CHURN, smell_baseclass_abstract, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Baseclass Abstract) x KLOC")
abline(lm(smell_baseclass_abstract ~ CHURN), col = "red")
corr_baseclass_abstract = cor.test(churn,smell_baseclass_abstract, method = "spearman", exact = FALSE)
View(corr_baseclass_abstract)
smell_class_data_private = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_class_data_private NOT NULL")
churn = smell_class_data_private$linesEdited
smell_class_data_private = smell_class_data_private$smell_class_data_private
corr_baseclass_abstract = cor.test(churn,smell_class_data_private, method = "spearman", exact = FALSE)
corr_class_data_private = cor.test(churn,smell_class_data_private, method = "spearman", exact = FALSE)
View(corr_class_data_private)
corr_class_data_private[["p.value"]]
corr_class_data_private[["estimate"]]
corr_class_data_private[["statistic"]]
CHURN = (churn)/1000
plot(CHURN, smell_class_data_private, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Baseclass Abstract) x KLOC")
abline(lm(smell_class_data_private ~ CHURN), col = "red")
smell_baseclass_abstract = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_baseclass_abstract NOT NULL")
churn = smell_baseclass_abstract$linesEdited
smell_baseclass_abstract = smell_baseclass_abstract$smell_baseclass_abstract
corr_baseclass_abstract = cor.test(churn,smell_baseclass_abstract, method = "spearman", exact = FALSE)
View(corr_baseclass_abstract)
corr_baseclass_abstract[["p.value"]]
smell_large_class = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_large_class NOT NULL")
churn = smell_large_class$linesEdited
smell_large_class = smell_large_class$smell_large_class
corr_large_class = cor.test(churn,smell_large_class, method = "spearman", exact = FALSE)
CHURN = (churn)/1000
plot(CHURN, smell_large_class, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Baseclass Abstract) x KLOC")
abline(lm(smell_large_class ~ CHURN), col = "red")
View(corr_large_class)
corr_large_class[["estimate"]]
corr_large_class[["p.value"]]
smell_lazy_class = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_lazy_class NOT NULL")
churn = smell_lazy_class$linesEdited
smell_lazy_class = smell_lazy_class$smell_lazy_class
corr_lazy_class = cor.test(churn,smell_lazy_class, method = "spearman", exact = FALSE)
#PLOT GRAFICO
CHURN = (churn)/1000
plot(CHURN, smell_lazy_class, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Large Class) x KLOC")
abline(lm(smell_lazy_class ~ CHURN), col = "red")
View(corr_lazy_class)
smell_long_method = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_long_method NOT NULL")
churn = smell_long_method$linesEdited
smell_long_method = smell_long_method$smell_long_method
corr_long_method = cor.test(churn,smell_long_method, method = "spearman", exact = FALSE)
#PLOT GRAFICO
CHURN = (churn)/1000
plot(CHURN, smell_long_method, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Large Class) x KLOC")
abline(lm(smell_long_method ~ CHURN), col = "red")
View(corr_long_method)
corr_long_method[["parameter"]]
corr_long_method[["p.value"]]
corr_long_method[["estimate"]]
smell_long_parameter_list = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_long_parameter_list NOT NULL")
churn = smell_long_parameter_list$linesEdited
smell_long_parameter_list = smell_long_parameter_list$smell_long_parameter_list
corr_long_parameter_list = cor.test(churn,smell_long_parameter_list, method = "spearman", exact = FALSE)
CHURN = (churn)/1000
plot(CHURN, smell_long_parameter_list, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Long Parameter List) x KLOC")
abline(lm(smell_long_parameter_list ~ CHURN), col = "red")
View(corr_long_parameter_list)
corr_long_parameter_list[["p.value"]]
corr_long_parameter_list[["estimate"]]
smell_many_field_attributes_not_complex = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_many_field_attributes_not_complex NOT NULL")
churn = smell_many_field_attributes_not_complex$linesEdited
smell_many_field_attributes_not_complex = smell_many_field_attributes_not_complex$smell_many_field_attributes_not_complex
corr_many_field_attributes_not_complex = cor.test(churn,smell_many_field_attributes_not_complex, method = "spearman", exact = FALSE)
CHURN = (churn)/1000
plot(CHURN, smell_many_field_attributes_not_complex, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Many field attributes not complex ) x KLOC")
abline(lm(smell_many_field_attributes_not_complex ~ CHURN), col = "red")
View(corr_many_field_attributes_not_complex)
corr_many_field_attributes_not_complex[["estimate"]]
corr_many_field_attributes_not_complex[["p.value"]]
smell_refused_parent_bequest = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_refused_parent_bequest NOT NULL")
churn = smell_refused_parent_bequest$linesEdited
smell_refused_parent_bequest = smell_refused_parent_bequest$smell_refused_parent_bequest
corr_refused_parent_bequest = cor.test(churn,smell_refused_parent_bequest, method = "spearman", exact = FALSE)
CHURN = (churn)/1000
plot(CHURN, smell_refused_parent_bequest, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Refused Parent Bequest) x KLOC")
abline(lm(smell_refused_parent_bequest ~ CHURN), col = "red")
View(corr_refused_parent_bequest)
smell_spaghetti_code = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_spaghetti_code NOT NULL")
churn = smell_spaghetti_code$linesEdited
smell_spaghetti_code = smell_spaghetti_code$smell_spaghetti_code
corr_spaghetti_code = cor.test(churn,smell_spaghetti_code, method = "spearman", exact = FALSE)
CHURN = (churn)/1000
plot(CHURN, smell_spaghetti_code, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Spaghetti Code) x KLOC")
abline(lm(smell_spaghetti_code ~ CHURN), col = "red")
View(corr_spaghetti_code)
corr_spaghetti_code[["estimate"]]
smell_speculative_generality = dbGetQuery(new_bd,"SELECT * FROM BASE_ULTIMATE WHERE BASE_ULTIMATE.smell_speculative_generality NOT NULL")
churn = smell_speculative_generality$linesEdited
smell_speculative_generality = smell_speculative_generality$smell_speculative_generality
corr_speculative_generality = cor.test(churn,smell_speculative_generality, method = "spearman", exact = FALSE)
CHURN = (churn)/1000
plot(CHURN, smell_speculative_generality, pch = 23, ylim = c(0,800), xlim = c(0,800),  col = "black", main="TD(Speculative Generality) x KLOC")
abline(lm(smell_speculative_generality ~ CHURN), col = "red")
#conecta ao BD
dataBase = dbConnect(SQLite(), "TechnicalDebtDataset_20200606.db")
new_bd = dbConnect(SQLite(), "NEW_DATA.db")
for (i in project_list){
projectID = i
devs_data = dbGetQuery(dataBase, "SELECT COUNT(DISTINCT commitHash) AS n_commits,
author AS [author], projectID as [projectID]
FROM COMMIT_MUDANCAS_2
WHERE projectID = ? AND merge='False'
GROUP BY author"
, params = c(projectID))
#Adiciona todos os commits de todos os desenvolvedores
dbWriteTable(new_bd, "QTD_COMMITS", devs_data, append=TRUE)
}
for (i in project_list){
projectID = i
devs_data = dbGetQuery(dataBase, "SELECT COUNT(DISTINCT COMMIT_MUDANCAS_2.commit_hash) AS n_commits,
author AS [author], projectID as [projectID]
FROM COMMIT_MUDANCAS_2
WHERE projectID = ? AND merge='False'
GROUP BY author"
, params = c(projectID))
#Adiciona todos os commits de todos os desenvolvedores
dbWriteTable(new_bd, "QTD_COMMITS", devs_data, append=TRUE)
}
for (i in project_list){
projectID = i
devs_data = dbGetQuery(dataBase, "SELECT COUNT(DISTINCT COMMIT_MUDANCAS_2.commit_hash) AS n_commits,
author AS [author], projectID as [projectID]
FROM COMMIT_MUDANCAS_2
WHERE projectID = ?
GROUP BY author"
, params = c(projectID))
#Adiciona todos os commits de todos os desenvolvedores
dbWriteTable(new_bd, "QTD_COMMITS", devs_data, append=TRUE)
}
data_commit = dbGetQuery(new_bd,"SELECT BASE_ULTIMATE.projectID, BASE_ULTIMATE.author, BASE_ULTIMATE.linesEdited, BASE_ULTIMATE.code_smells, QTD_COMMITS.n_commits
FROM BASE_ULTIMATE INNER JOIN QTD_COMMITS ON BASE_ULTIMATE.author = QTD_COMMITS.author GROUP BY BASE_ULTIMATE.author")
View(data_commit)
qtd_smel = data_commit$code_smells
print(qtd_smel)
print(qtd_smel)
print(length(qtd_smel))
View(corr_speculative_generality)
corr_speculative_generality[["p.value"]]
corr_speculative_generality
View(smell_list)
View(cor_smells_codeChurn_spearman)
cor_smells_codeChurn_spearman
View(cor2_smells_codeChurn_spearman)
cor2_smells_codeChurn_spearman
View(corr_antisingleton)
corr_antisingleton
View(corr_baseclass_abstract)
corr_baseclass_abstract
View(corr_class_data_private)
corr_class_data_private
View(corr_complex_class)
corr_complex_class
corr_complex_class[["p.value"]]
View(corr_large_class)
corr_large_class
View(corr_lazy_class)
corr_lazy_class
corr_lazy_class[["p.value"]]
View(corr_long_method)
corr_long_method
corr_long_method[["p.value"]]
View(corr_long_parameter_list)
corr_long_parameter_list
View(corr_many_field_attributes_not_complex)
corr_many_field_attributes_not_complex
View(corr_refused_parent_bequest)
corr_refused_parent_bequest
View(corr_spaghetti_code)
corr_spaghetti_code
View(corr_speculative_generality)
corr_speculative_generality
